H3Event {
  __is_event__: true,
  node: {
    req: IncomingMessage {
      _readableState: [ReadableState],
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      socket: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/api/user',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: [Socket],
      _consuming: false,
      _dumped: false,
      originalUrl: '/api/user',
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 40,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    res: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Socket],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [IncomingMessage],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kEndCalled)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: null,
      [Symbol(kUniqueHeaders)]: null
    }
  },
  web: undefined,
  context: {
    _nitro: { routeRules: {} },
    nitro: { errors: [] },
    _supabaseClient: SupabaseClient {
      supabaseUrl: 'https://xaiifoctcnauketihyxw.supabase.co',
      supabaseKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhhaWlmb2N0Y25hdWtldGloeXh3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDUxNzQxNTgsImV4cCI6MjAyMDc1MDE1OH0.yxL82yvBQX0sNyCPs8ITQXjXhV_-xyGCtuh6hj4z8WA',
      realtimeUrl: 'wss://xaiifoctcnauketihyxw.supabase.co/realtime/v1',
      authUrl: 'https://xaiifoctcnauketihyxw.supabase.co/auth/v1',
      storageUrl: 'https://xaiifoctcnauketihyxw.supabase.co/storage/v1',
      functionsUrl: 'https://xaiifoctcnauketihyxw.supabase.co/functions/v1',
      storageKey: 'sb-xaiifoctcnauketihyxw-auth-token',
      headers: [Object],
      auth: [SupabaseAuthClient],
      fetch: [Function (anonymous)],
      realtime: [RealtimeClient],
      rest: [PostgrestClient],
      changedAccessToken: 'eyJhbGciOiJIUzI1NiIsImtpZCI6IlNTemJoeW1sZHY5NlpYdzEiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNzA2MjA5MDUyLCJpYXQiOjE3MDYyMDU0NTIsImlzcyI6Imh0dHBzOi8veGFpaWZvY3RjbmF1a2V0aWh5eHcuc3VwYWJhc2UuY28vYXV0aC92MSIsInN1YiI6IjY1NWM2ZDE3LWIzMTQtNDFhMy04OWZmLWU0YzhlMGQ2Mzg5ZSIsImVtYWlsIjoibmV0YmthQGdtYWlsLmNvbSIsInBob25lIjoiIiwiYXBwX21ldGFkYXRhIjp7InByb3ZpZGVyIjoiZ2l0aHViIiwicHJvdmlkZXJzIjpbImdpdGh1YiJdfSwidXNlcl9tZXRhZGF0YSI6eyJhdmF0YXJfdXJsIjoiaHR0cHM6Ly9hdmF0YXJzLmdpdGh1YnVzZXJjb250ZW50LmNvbS91LzE3OTU5MjE3P3Y9NCIsImVtYWlsIjoibmV0YmthQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJmdWxsX25hbWUiOiJQZXRlciIsImlzcyI6Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20iLCJuYW1lIjoiUGV0ZXIiLCJwaG9uZV92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6Im5ldGJrYSIsInByb3ZpZGVyX2lkIjoiMTc5NTkyMTciLCJzdWIiOiIxNzk1OTIxNyIsInVzZXJfbmFtZSI6Im5ldGJrYSJ9LCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImFhbCI6ImFhbDEiLCJhbXIiOlt7Im1ldGhvZCI6Im9hdXRoIiwidGltZXN0YW1wIjoxNzA2MTY4MDQxfV0sInNlc3Npb25faWQiOiIzODQ1MGNiYS1mOTc0LTQ2OWMtOGZmMi05MGZhMWNiZDFmZTkifQ.uxSYnRDgPcvmFbamiE9KovK9DgrRiPKx3fIS-RmrYdk'
    },
    _user: {
      id: '655c6d17-b314-41a3-89ff-e4c8e0d6389e',
      aud: 'authenticated',
      role: 'authenticated',
      email: 'netbka@gmail.com',
      email_confirmed_at: '2024-01-14T15:12:46.475239Z',
      phone: '',
      confirmed_at: '2024-01-14T15:12:46.475239Z',
      last_sign_in_at: '2024-01-25T07:34:01.072818Z',
      app_metadata: [Object],
      user_metadata: [Object],
      identities: [Array],
      created_at: '2024-01-14T15:12:46.461697Z',
      updated_at: '2024-01-25T17:57:32.516166Z'
    },
    user: {
      id: '655c6d17-b314-41a3-89ff-e4c8e0d6389e',
      aud: 'authenticated',
      role: 'authenticated',
      email: 'netbka@gmail.com',
      email_confirmed_at: '2024-01-14T15:12:46.475239Z',
      phone: '',
      confirmed_at: '2024-01-14T15:12:46.475239Z',
      last_sign_in_at: '2024-01-25T07:34:01.072818Z',
      app_metadata: [Object],
      user_metadata: [Object],
      identities: [Array],
      created_at: '2024-01-14T15:12:46.461697Z',
      updated_at: '2024-01-25T17:57:32.516166Z'
    },
    matchedRoute: { path: '/api/user', handlers: [Object] },
    params: {}
  },
  _method: undefined,
  _path: '/api/user',
  _headers: undefined,
  _requestBody: undefined,
  _handled: false,
  fetch: [Function (anonymous)],
  '$fetch': [Function (anonymous)],
  waitUntil: [Function (anonymous)],
  captureError: [Function (anonymous)]
}